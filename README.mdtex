# gulp-markdown-equations

A gulp plugin that makes it easy to replace latex equations in a markdown file with rendered images


## Introduction

This module exposes the tools necessary to to substitute $\LaTeX$ equations in a markdown document with rendered raster or vector images. It uses the [transform-markdown-mathmode](https://www.npmjs.com/package/transform-markdown-mathmode) node module to locate and transform equations and reconnects with the gulp pipeline after the results have been rendered to complete the transformation using information from the result.

This means you can just mix $\LaTeX$ into your markdown document. For example,

```markdown
It handles inline equations like $\nabla \cdot \vec{u} = 0$ and display equations like $$\frac{D\rho}{Dt} = 0.$$
```

gets transformed into:

It handles inline equations like $\nabla \cdot \vec{u} = 0$ and display equations like $$\frac{D\rho}{Dt} = 0.$$

Of course it's gulp plugin though, so that means you can really do whatever you want with it!

## Example

The following is a gulp task that locates equations in markdown, renders them, and lets you do whatever you want with the result! First things first, here's the data flow:

<div style="text-align:center;"><img src="docs/images/flowchart.png" width="392" height="388"></div>

```javascript
var gulp = require('gulp')
  , mdEq = require('gulp-markdown-equations')
  , tap = require('gulp-tap')
  , filter = require('gulp-filter')
  , latex = require('gulp-latex')
  , pdftocairo = require('gulp-pdftocairo')


gulp.task('mdtex',function() {

  var texFilter = filter('*.tex')
  var mdFilter = filter('*.md')

  // Instantiate the transform and set some defaults:
  var eqSub = mdEq({
    defaults: {
      display: { margin: '1pt' },
      inline: {margin: '1pt'}
    }
  })

  return gulp.src('*.mdtex')
    .pipe(eqSub)

    // Separate the equations:
    .pipe(texFilter)

    // Render the equations to pdf:
    .pipe(latex())

    // Convert the pdf equations to png:
    .pipe(pdftocairo({format: 'png'}))

    // Send them to the images folder:
    .pipe(gulp.dest('images'))

    // Match the output images up with the markdown input so that we can use the resulting
    // metadata to construct html that replaces the original equations:
    .pipe(tap(function(file) {
      eqSub.complete(file,function(cb,meta) {
        var img = '<img alt="'+meta.alt+'" style="vertical-align:middle" src="'+meta.path+'" width="'+meta.width/2+'" height="'+meta.height/2+'">'
        meta.display ? cb('<div style="text-align:center">'+img+'</div>') : cb(img)
      })
    }))

    // Grab the original markdown file that's now complete:
    .pipe(texFilter.restore()).pipe(mdFilter)

    // Output in the current directory:
    .pipe(gulp.dest('./'))
})
```

The task is the run with

```bash
$ gulp mdtex
```


## API

API documentation in its way!


## Testing

Tests on the way too...

## Credits

(c) 2015 Ricky Reusser. MIT License
